{"version":3,"sources":["stores/TodoModel.js","stores/TodoStore.js","components/TodoEntry.js","components/TodoItem.js","components/TodoItems.js","components/EraseCompleted.js","components/TodoFooter.js","App.js","serviceWorker.js","index.js"],"names":["TodoModel","store","title","completed","id","destroy","this","observable","action","lastID","todos","todosAll","push","forEach","todo","currentid","console","log","remove","lastId","autorun","filter","i","length","TodoEntry","state","value","handleKeyDown","event","keyCode","preventDefault","TodoStore","addTodo","setState","className","onChange","target","onKeyDown","type","placeholder","Component","TodoItem","observer","props","onToggle","toggle","deletetodoo","bind","removeTodo","checked","onClick","TodoItems","map","key","EraseCompleted","clear","Clear","TodoFooter","active","complete","all","selectedAll","selectedActive","selectedComplete","All","Active","Complete","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c0878d37.chunk.js","sourcesContent":["import {observable, action} from 'mobx'\r\n\r\nexport default class TodoModel {\r\n    store\r\n    id\r\n    @observable title\r\n    @observable completed\r\n    @observable destroy\r\n\r\n    constructor(store, title, completed, id, destroy){\r\n        this.title = title\r\n        this.completed = completed\r\n        this.id = id\r\n        this.store = store\r\n        this.destroy = destroy\r\n    }\r\n\r\n    @action\r\n    toggle() {\r\n        this.completed = !this.completed\r\n    }\r\n}","import {observable, autorun, action} from 'mobx';\r\nimport TodoModel from './TodoModel';\r\n\r\nclass TodoStore {\r\n    @observable todos= []\r\n    lastID = 0\r\n\r\n    @observable\r\n    todosAll = [];\r\n\r\n    @action\r\n    addTodo(title) {\r\n        this.todos = this.todosAll;\r\n        this.todos.push(new TodoModel(this, title, false, this.lastID ++, false))\r\n        this.todosAll = this.todos;\r\n        this.todosAll.forEach(todo => {\r\n        });\r\n    }\r\n    @action\r\n  removeTodo(currentid) {\r\n    console.log(\"destroy id: \" + currentid);\r\n    this.todosAll.remove(this.todosAll[currentid]);\r\n    this.lastId = this.lastId - 1;\r\n    this.todosAll.forEach(todo => {\r\n      if (todo.id > currentid) {\r\n        todo.id = todo.id - 1;\r\n      } else if (todo.id < currentid) {\r\n        todo.id = todo.id;\r\n      }\r\n    });\r\n    this.todos = this.todosAll;\r\n  }\r\n  @action\r\n  All() {\r\n    autorun(() => {\r\n      this.todos = this.todosAll.filter(todo => todo.completed !== \"\");\r\n    });\r\n  }\r\n  @action\r\n  Active() {\r\n    autorun(() => {\r\n      this.todos = this.todosAll.filter(todo => todo.completed === false);\r\n    });\r\n  }\r\n  @action\r\n  Complete() {\r\n    autorun(() => {\r\n      this.todos = this.todosAll.filter(todo => todo.completed === true);\r\n    });\r\n  }\r\n  @action\r\n  Clear() {\r\n    for (let i = 0; i < this.todosAll.length; i++) {\r\n      if (this.todosAll[i].completed === true) {\r\n        this.todosAll.remove(this.todosAll[i]);\r\n        this.todosAll.forEach(todo => {\r\n          if (todo.id > i) {\r\n            todo.id = todo.id - 1;\r\n          } else if (todo.id < i) {\r\n            todo.id = todo.id;\r\n          }\r\n        });\r\n        this.lastId--;\r\n        i--;\r\n      }\r\n    }\r\n    this.todos = this.todosAll;\r\n  }\r\n\r\n\r\n}\r\n\r\nconst store= new TodoStore()\r\nexport default store","import React, {Component} from 'react'\r\nimport TodoStore from '../stores/TodoStore'\r\n\r\nclass TodoEntry extends Component {\r\n    state = {\r\n        value: ''\r\n    };\r\n\r\n    handleKeyDown = event => {\r\n        if(event.keyCode !== 13){\r\n            return;\r\n        }\r\n        event.preventDefault()\r\n        TodoStore.addTodo(this.state.value)\r\n        this.setState({\r\n            value: ''\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <header className=\"header\">\r\n          <h1>Todo List</h1>\r\n          <input\r\n          value={this.state.value}\r\n          onChange={event => this.setState({value: event.target.value})}\r\n          onKeyDown={\r\n              event => this.handleKeyDown(event)\r\n          }\r\n          type=\"text\"\r\n          className=\"new-todo\"\r\n          placeholder=\"what needs to be done?\"\r\n          />\r\n        </header>\r\n        )\r\n    }\r\n\r\n}\r\nexport default TodoEntry;","import React, {Component} from 'react'\r\nimport {observer} from 'mobx-react'\r\nimport TodoStore from '../stores/TodoStore'\r\n\r\n@observer\r\nclass TodoItem extends Component {\r\n    onToggle= () =>{\r\n        this.props.todo.toggle()\r\n    };\r\n    constructor(props) {\r\n         super(props);\r\n         this.deletetodoo = this.deletetodoo.bind(this);\r\n        }\r\n    deletetodoo() {\r\n      TodoStore.removeTodo(this.props.todo.id);\r\n     }\r\n\r\n    render() {\r\n        const { todo } = this.props;\r\n        return(\r\n                <li className={todo.completed ? \"completed\" : \" \"}>\r\n                    <div className=\"view\">\r\n                        <input\r\n                        onChange={this.onToggle}\r\n                         type=\"checkbox\"\r\n                         className=\"toggle\"\r\n                         value=\"on\"\r\n                         checked={todo.completed}\r\n                         />\r\n                        <label>{todo.title}</label>\r\n                        <button className=\"destry\" onClick={this.deletetodoo} />\r\n                    </div>\r\n                </li>\r\n        );\r\n    }\r\n\r\n}\r\nexport default TodoItem;","import React, {Component} from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport TodoStore from \"../stores/TodoStore\"\r\nimport {observer} from 'mobx-react'\r\n\r\n@observer\r\nclass TodoItems extends Component {\r\n    render() {\r\n        return(\r\n             <section className=\"main\">\r\n            <ul className=\"todo-list\"> {\r\n                TodoStore.todos.map(todo=>{\r\n                    return(\r\n                        <TodoItem key={todo.id} todo= {todo} />\r\n                    )\r\n                })\r\n            }\r\n            </ul>\r\n            </section>\r\n        );\r\n    }\r\n\r\n}\r\nexport default TodoItems;","import React, { Component } from \"react\";\r\nimport TodoStore from '../stores/TodoStore'\r\nimport { observer } from \"mobx-react\";\r\n@observer\r\nclass EraseCompleted extends Component {\r\n  constructor(props) {\r\n      super(props)\r\n    this.clear = this.clear.bind(this);\r\n  }\r\n  clear() {\r\n    TodoStore.Clear();\r\n      }\r\n  render() {\r\n    if (TodoStore.todosAll.filter(todo => todo.completed === true).length>0) {\r\n      return (\r\n        <a onClick={this.clear} className=\"clear-completed\">\r\n         Erase completed\r\n        </a>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\nexport default EraseCompleted","import EraseCompleted from \"./EraseCompleted\";\r\nimport React, { Component } from \"react\";\r\nimport TodoStore from '../stores/TodoStore'\r\nimport { observer } from \"mobx-react\";\r\n@observer\r\nclass TodoFooter extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.active = this.active.bind(this);\r\n    this.complete = this.complete.bind(this);\r\n    this.all = this.all.bind(this);\r\n\r\n    this.state = {\r\n      selectedAll: true,\r\n      selectedActive: false,\r\n      selectedComplete: false\r\n    };\r\n  }\r\n  all() {\r\n    this.setState({\r\n      selectedAll: true,\r\n      selectedActive: false,\r\n      selectedComplete: false\r\n    });\r\n    TodoStore.All();\r\n  }\r\n  active() {\r\n    this.setState({\r\n      selectedAll: false,\r\n      selectedActive: true,\r\n      selectedComplete: false\r\n    });\r\n    TodoStore.Active();\r\n  }\r\n  complete() {\r\n    this.setState({\r\n      selectedAll: false,\r\n      selectedActive: false,\r\n      selectedComplete: true\r\n    });\r\n    TodoStore.Complete();\r\n  }\r\n\r\n  render() {\r\n    if (TodoStore.todosAll.length > 0) {\r\n      return (\r\n        <div className=\"footer\">\r\n          <button className=\"todo-count\">\r\n            <span>\r\n              {TodoStore.todosAll.filter(todo => todo.completed === false).length}\r\n            </span>\r\n            <strong> task(s) left </strong>\r\n          </button>\r\n          <ul className=\"filters\">\r\n            <li onClick={this.all}>\r\n              <button>\r\n                <a className={this.state.selectedAll ? \"selected\" : \" \"}>\r\n                  {\" \"}\r\n                  All tasks\r\n                </a>\r\n              </button>\r\n            </li>\r\n\r\n            <li onClick={this.active}>\r\n              <button type=\"submit\">\r\n                <a className={this.state.selectedActive ? \"selected\" : \" \"}>\r\n                  {\" \"}\r\n                  Active tasks\r\n                </a>\r\n              </button>\r\n            </li>\r\n\r\n            <li onClick={this.complete}>\r\n              <button type=\"submit\">\r\n                <a className={this.state.selectedComplete ? \"selected\" : \" \"}>\r\n                  Completed tasks\r\n                </a>\r\n              </button>\r\n            </li>\r\n          </ul>\r\n          <EraseCompleted />\r\n        </div>\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\nexport default TodoFooter;\r\n","import React, {Component } from 'react';\nimport './App.css';\nimport TodoEntry from './components/TodoEntry';\nimport TodoItems from './components/TodoItems';\nimport TodoFooter from \"./components/TodoFooter\";\n\nclass App extends Component{\n  render() {\n    return (\n      <div id=\"todoapp\" className=\"todoapp\">\n        <TodoEntry/>\n        <TodoItems/>\n        <TodoFooter />\n\n      </div>\n     );\n   }\n }\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}